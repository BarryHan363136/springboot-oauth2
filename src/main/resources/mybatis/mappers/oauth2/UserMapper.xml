<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bmw.azure.oauth2.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.bmw.azure.oauth2.entity.User" >
    <id column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="activated" property="activated" jdbcType="BIT" />
    <result column="activation_key" property="activationKey" jdbcType="VARCHAR" />
    <result column="reset_password_key" property="resetPasswordKey" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, user_name, email, password, activated, activation_key, reset_password_key
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from spark_user
    where user_id = #{userId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from spark_user
    where user_id = #{userId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.bmw.azure.oauth2.entity.User" >
    insert into spark_user (user_id, user_name, email, 
      password, activated, activation_key, 
      reset_password_key)
    values (#{userId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{activated,jdbcType=BIT}, #{activationKey,jdbcType=VARCHAR}, 
      #{resetPasswordKey,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.bmw.azure.oauth2.entity.User" >
    insert into spark_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="activated != null" >
        activated,
      </if>
      <if test="activationKey != null" >
        activation_key,
      </if>
      <if test="resetPasswordKey != null" >
        reset_password_key,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="activated != null" >
        #{activated,jdbcType=BIT},
      </if>
      <if test="activationKey != null" >
        #{activationKey,jdbcType=VARCHAR},
      </if>
      <if test="resetPasswordKey != null" >
        #{resetPasswordKey,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bmw.azure.oauth2.entity.User" >
    update spark_user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="activated != null" >
        activated = #{activated,jdbcType=BIT},
      </if>
      <if test="activationKey != null" >
        activation_key = #{activationKey,jdbcType=VARCHAR},
      </if>
      <if test="resetPasswordKey != null" >
        reset_password_key = #{resetPasswordKey,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bmw.azure.oauth2.entity.User" >
    update spark_user
    set user_name = #{userName,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      activated = #{activated,jdbcType=BIT},
      activation_key = #{activationKey,jdbcType=VARCHAR},
      reset_password_key = #{resetPasswordKey,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=VARCHAR}
  </update>

  <select id="findResults" resultMap="BaseResultMap" parameterType="java.util.Map" >
  <![CDATA[
     select * from spark_user
     ]]>
  </select>
</mapper>